import { existsSync, readFileSync } from 'node:fs'
import { join as pathJoin } from 'node:path'
import { getModuleDir, walkDirSync, saveFileSync } from '../lib/fs.js'

const stylePath = getModuleDir('@design-system/style')
const componentPath = getModuleDir('@design-system/component')
const corePath = getModuleDir('@design-system/core')

let indexes = {}
const elementRegExp = /<([a-z][a-z0-9]*)[^>]*>/g
const attrsRegExp =
  /(class|is|type)=["']?((?:.(?!["']?\s+(?:\S+)=|\s*\/?[>"']))+.)["']?/g

// TODO when other attr are present, fails to parse ...
const htmlRegExp =
  /(?:(?=(\s+(?:type="?([^"]*)"?|class="?([^"]*)"?|is="?([^"]*)"?)|[^\s>]+|\s+))\1)*/
const elemSplitRegExp = /[/> ]/
const parse = (content) => {
  let matchElement
  while ((matchElement = elementRegExp.exec(content))) {
    const [elem, tag] = matchElement

    indexes.tags[tag] ??= 0
    indexes.tags[tag] += 1
    if (tag === 'h') {
      console.log(tag, elem)
    }
    const matchAttrs = elem.match(attrsRegExp)
    if (!matchAttrs) continue
    const attrs = {}
    for (let attr of matchAttrs) {
      const eq = attr.indexOf('=')
      const key = attr.substring(0, eq)
      const value =
        attr.charAt(eq + 1) === '"'
          ? attr.substring(eq + 2, attr.length - 1)
          : attr.substring(eq + 1)
      attrs[key] = value
    }

    if (tag === 'input' && attrs.type) {
      const tagExpression = `${tag}[type=${attrs.type}]`
      indexes.tags[tagExpression] ??= 0
      indexes.tags[tagExpression] += 1
    }

    if (attrs.class) {
      for (const className of attrs.class.split(' ')) {
        let key = `.${className}`
        indexes.classes[key] ??= 0
        indexes.classes[key] += 1
        key = `${tag}.${className}`
        indexes.classes[key] ??= 0
        indexes.classes[key] += 1
      }
    }

    if (attrs.is) {
      indexes.pewc[attrs.is] ??= 0
      indexes.pewc[attrs.is] += 1
    }
  }
}

const buildCSS = ({ tags, classes, pewc } = {}, theme) => {
  let list = Object.keys(tags)
  list.sort()
  let css = `/* generated by @design-system/cli */\n`
  css += `@import '@design-system/style/base.css';\n`
  css += `@import '@design-system/style/media.css';\n`
  for (const key of list) {
    if (existsSync(`${stylePath}/element/${key}.css`)) {
      css += `@import '@design-system/style/element/${key}.css';\n`
    }
  }
  list = Object.keys(classes)
  list.sort()
  for (const key of list) {
    if (existsSync(`${stylePath}/classes/${key}.css`)) {
      css += `@import '@design-system/style/classes/${key}.css';\n`
    }
  }
  list = Object.keys(pewc)
  list.sort()
  for (const key of list) {
    if (existsSync(`${componentPath}/${key}.css`)) {
      css += `@import '@design-system/component/${key}.css';\n`
    }
  }
  css += `@import '${theme}';\n`
  return css
}

// const buildJS = ({ pewc } = {}) => {
//   const list = Object.keys(options.pewc.bootstrap)
//   list.sort()
//   let bootstrap = `/* generated by @design-system/cli */\n`
//   for (const key of list) {
//     if (existsSync(`${corePath}/${key}.js`)) {
//       bootstrap += `import '@design-system/core/${key}.js'\n`
//     }
//   }
//   return bootstrap
// }

// const copyPEWC = ({ pewc }) => {
//
// }

const extract = (input, options = {}) => {
  const sourceDir = pathJoin(process.cwd(), input)
  //console.log(sourceDir, options)
  indexes = { tags: {}, classes: {}, pewc: {} }

  for (const filePath of walkDirSync(sourceDir, '.html')) {
    if (options.debug) {
      console.log('Parse', filePath)
    }
    const content = readFileSync(filePath).toString()
    parse(content)
  }

  if (options.debug) {
    console.log('tags', Object.keys(indexes.tags).sort())
    console.log('classes', Object.keys(indexes.classes).sort())
    console.log('pewc', Object.keys(indexes.pewc).sort())
  }

  if (options.cssPath) {
    const data = buildCSS(indexes, options.theme)
    saveFileSync(options.cssPath, data)
    console.log('Saved', options.cssPath)
  }
  console.log('Done!')
}

export default extract
